;
;   basic operators definement
;
def conv1x1
    "stride" !
    "out_size" !
    "in_size" !

    ; W
    ["out_size" @ "in_size" @ 1 1 ] "YNX_FLOAT" ynx.NewTensor~ 0 ynx.Register~ 
    ; B
    none

    ; auto_pad, dilation, group, kernel, pads, strides
    "NOTSET" [1 1] 1 [1 1] [0 0 0 0] ["stride" @ dup]             
    onnx.Conv 
end

def conv3x3
    "stride" !
    "out_size" !
    "in_size" !

    ; W
    ["out_size" @ "in_size" @ 3 3 ] "YNX_FLOAT" ynx.NewTensor~ 0 ynx.Register~
    ; B
    none

    ; auto_pad, dilation, group, kernel, pads, strides
    "NOTSET" [1 1] 1 [3 3] [1 1 1 1] ["stride" @ dup]             
    onnx.Conv 
end

def conv7x7
    ; W
    [64 3 7 7 ] "YNX_FLOAT" ynx.NewTensor~ 
    ; B
    none

    ; auto_pad, dilation, group, kernel, pads, strides
    "NOTSET" [1 1] 1 [7 7] [3 3 3 3] [2 2]             
    onnx.Conv 
end

def batch_norm
    "out_feature" !

    ["out_feature" @] "YNX_FLOAT" ynx.NewTensor~     ; scale
    0 ynx.Register~
    ["out_feature" @] "YNX_FLOAT" ynx.NewTensor~     ; B
    0 ynx.Register~
    ["out_feature" @] "YNX_FLOAT" ynx.NewTensor~     ; input_mean
    0 ynx.Register~
    ["out_feature" @] "YNX_FLOAT" ynx.NewTensor~     ; input_var
    0 ynx.Register~
    none none none false false
    
    onnx.BatchNormalization
end

def max_pool2d
    "NOTSET" 0 [1 1]            ; auto_pad, ceil_Mode, dilation
    [3 3]                       ; kernel_shape
    [1 1 1 1]                   ; pads
    0                           ; storage_order
    [2 2]                       ; strides
    false                       ; we don't want Indices
    
    onnx.MaxPool
end

def avg_pool2d
    "NOTSET" 0 0                ; auto_pad, ceil_Mode, count_include_pad
    [7 7]                       ; kernel_shape
    [0 0 0 0]                   ; pads
    [1 1]                       ; strides
     
    onnx.AveragePool
end

def linear
    "out_size" !
    "in_size" !
    
    ; W
    ["in_size" @ "out_size" @ ] "YNX_FLOAT" ynx.NewTensor~ 0 ynx.Register~ 
    onnx.MatMul

    ; B
    [1 "out_size" @] "YNX_FLOAT" ynx.NewTensor~                                      
    onnx.Add
end

;
; the components fro ResNet
;
def BasicBlock_DownSample
    "outplanes" !
    "inplanes" !

    dup
    "inplanes" @ "outplanes" @ 2 conv1x1
    "outplanes" @ batch_norm
   
    swap
    "inplanes" @ "outplanes" @ 2 conv3x3
    "outplanes" @ batch_norm
    onnx.Relu
    "outplanes" @ dup 1 conv3x3
    "outplanes" @ batch_norm

    onnx.Add
    onnx.Relu
end

def BasicBlock
    "outplanes" !
    "inplanes" !

    "inplanes" @ "outplanes" @ 1 conv3x3
    "outplanes" @ batch_norm
    onnx.Relu
    "outplanes" @ dup 1 conv3x3
    "outplanes" @ batch_norm
end

def ResLayer0
    conv7x7
    64 batch_norm
    onnx.Relu
    max_pool2d
end

;
; completed network
;

def Resnet34
    ResLayer0                       ; layer 0
   
    { 64 64 BasicBlock } %3         ; layer 1

    64 128 BasicBlock_DownSample    ; layer 2
    { 128 128 BasicBlock } %3

    128 256 BasicBlock_DownSample   ; layer 3
    { 256 256 BasicBlock } %5       

    256 512 BasicBlock_DownSample   ; layer 4
    { 512 512 BasicBlock } %2

    ; output
    avg_pool2d
    1 onnx.Flatten
    512 1000 linear   
end


def test
    [4 3 224 224] "YNX_FLOAT" ynx.NewTensor~
    Resnet34
end

